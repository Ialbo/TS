#!/bin/bash
# Copyright (C) 2013 Ion Torrent Systems, Inc. All Rights Reserved
#
# THIS VERSION DOES NOT USE LVM.
#
set -u -e

TSCONFIG_CARD_ID="PERC H810"
PATH=/opt/MegaRAID/MegaCli/:$PATH
MEGALOG="-NoLog"

TSCONFIG_SRC_DIR='/usr/share/ion-tsconfig'
source $TSCONFIG_SRC_DIR/ts_params
source $TSCONFIG_SRC_DIR/ts_functions

#--------------------------------------
# Error handler called from trap command
#--------------------------------------
function error ()
{
    local PARENT_LINENO="$1"
    local CODE="${2:-1}"
    user_msg "=================================================================="
    user_msg "ERROR on or near line ${PARENT_LINENO}; exiting with status ${CODE}"
    user_msg "See file $TSCONFIG_LOG_DIR/$TSCONFIG_LOG_BASENAME for error details"
    user_msg "=================================================================="
    log "ERROR ${CODE}"
    log "LINENO: ${PARENT_LINENO}"
    exit ${CODE}
}

#---------------------------------------
# Return current TS version
#---------------------------------------
function get_ts_version(){
    # Return only the Major.Minor portion of the version string
    #set +e
    current_version=$(python -c "from ion import version; print version" 2>/dev/null)
    if [ "$current_version" != "" ]; then
        current_version=$(echo $current_version|cut -f1-2 -d".")
    elif which Analysis; then
        current_version=$(Analysis -v|grep ^Analysis|cut -f2 -d"("|sed 's/)//'|cut -f1-2 -d".")
    else
        current_version=""
    fi
    echo $current_version
    #set -e
}


#==============================================================================
# Patch ion-dbreports 3.6.x
#==============================================================================
function patch_3.6()
{
    patch -N /opt/ion/iondb/utils/devices.py << EOF
Index: devices.py
===================================================================
--- devices.py	(revision 64632)
+++ devices.py	(working copy)
@@ -65,6 +65,6 @@
         type = i.get_type()
         # Report Data Management requires an ext3/4 filesystem or nfs (anything that supports symbolic links actually)
         #if 'media' in path and ('ext' in type or 'nfs' in type):
-        if 'nfs' in type or ('media' in path and 'ext' in type):
+        if 'nfs' in type or ('/media' in path) or ('/mnt' in path):
             ret.append((path, path))
     return ret
EOF

    patch -N /opt/ion/iondb/rundb/report/views.py << EOF
Index: views.py
===================================================================
--- views.py	(revision 63257)
+++ views.py	(working copy)
@@ -1583,7 +1583,7 @@
                     dmactions_type = "On-Instrument Analysis"
                     previous_obj = exp.results_set.exclude(pk=result.pk)
                     if previous_obj:
-                        dmfilestat = previous_obj[0].get_filestat(dmactions_types.BASE)
+                        dmfilestat = previous_obj[0].get_filestat(dmactions_types.BASE).exclude(metaData__contains='thumb')
                         # replace dmfilestat
                         result.dmfilestat_set.filter(dmfileset__type=dmactions_types.BASE).delete()
                         dmfilestat.pk = None
EOF

if [[ $? -eq 0 ]]; then
    log $(service apache2 restart 2>&1)
fi
}

#==============================================================================
# Patch ion-dbreports 3.4
#==============================================================================
function patch_3.4()
{
    patch -N /opt/ion/iondb/backup/devices.py << EOF
Index: devices.py
===================================================================
--- devices.py	(revision 53848)
+++ devices.py	(working copy)
@@ -64,6 +64,6 @@
         path = i.get_path()
         type = i.get_type()
         # Report Data Management requires an ext3/4 filesystem or nfs (anything that supports symbolic links actually)
-        if 'media' in path and ('ext' in type or 'nfs' in type):
+        if 'nfs' in type or ('/media' in path) or ('/mnt' in path):
             ret.append((path, path))
     return ret
EOF
if [[ $? -eq 0 ]]; then
    log $(service apache2 restart 2>&1)
fi
}
#==============================================================================
# Patch ion-dbreports 3.2
#==============================================================================
function patch_3.2()
{
    patch -N /opt/ion/iondb/backup/devices.py << EOF
Index: devices.py
===================================================================
--- devices.py	(revision 53848)
+++ devices.py	(working copy)
@@ -64,6 +64,6 @@
         path = i.get_path()
         type = i.get_type()
         # Report Data Management requires an ext3/4 filesystem or nfs (anything that supports symbolic links actually)
-        if 'media' in path and ('ext' in type or 'nfs' in type):
+        if 'nfs' in type or ('/media' in path) or ('/mnt' in path):
             ret.append((path, path))
     return ret
EOF
if [[ $? -eq 0 ]]; then
    log $(service apache2 restart 2>&1)
fi
}
#==============================================================================
# Patch ion-dbreports 3.0 and earlier
#==============================================================================
function patch_3.0()
{
    patch -N /opt/ion/iondb/backup/devices.py << EOF
Index: devices.py
===================================================================
--- devices.py	(revision 49427)
+++ devices.py	(working copy)
@@ -53,6 +53,6 @@
     ret = []
     for i in devArr:
         path = i.get_path()
-        if 'media' in path:
+        if 'nfs' in type or ('/media' in path) or ('/mnt' in path):
             ret.append((path,path))
     return ret
EOF
if [[ $? -eq 0 ]]; then
    log $(service apache2 restart 2>&1)
fi
}

#==============================================================================
# Returns true when PERC H810 card is installed
# Implies that the MD1200 external storage unit is connected
#==============================================================================
function is_perc_installed ()
{
    if grep -q "$TSCONFIG_CARD_ID" /proc/scsi/scsi; then
        #echo "Hooray, external scsi is enabled"
        return 0
    else
        log "$TSCONFIG_CARD_ID not detected"
        return 1
    fi
}

#==============================================================================
# Returns block device for given Device ID (Enclosure ID)
#==============================================================================
function get_block_device ()
{
    device_id=$1
    adp_id=$(get_adapter_id)
    # Search all logical devices for matching block id - this loop works for up to 8 virtual drives
    for (( i=0; $i<8; i++ )); do
        # device_id extracted
        did=$(MegaCli64 -ldinfo -l${i} -a${adp_id} $MEGALOG|awk '/EnclId/{print $5}')
        if [[ $did -eq $device_id ]]; then
            LUN=$i
            #TODO - the print $7 positional depends on the fact that our adapter name has a space in it:
            # [1:2:0:0]    disk    DELL     PERC H810        3.13  /dev/sdc
            block_device=$(lsscsi|grep "$TSCONFIG_CARD_ID"|awk -v LUN="$LUN" '{split($1,location,":");if (location[3]==LUN)print $7}')
            echo "$block_device"
            return
        fi
    done
}

#==============================================================================
# Get controller card "adapter id"
# Assumes there is only one card - will return after finding first card
#==============================================================================
function get_adapter_id()
{
    num_adp=$(MegaCli64 -adpCount $MEGALOG| grep "Controller Count" | sed -e 's/ //g' -e 's/\.//' | cut -d: -f2)
    if [[ "$num_adp" == "" ]]; then num_adp=0; fi
    for (( i=0; i<${num_adp}; i++ ));
    do
        name=$(MegaCli64 -AdpAllInfo -a${i} $MEGALOG| grep "Product Name" | cut -f2 -d: | sed 's/ Adapter//g' | sed -e 's/^[ \t]*//')
        if [ "$name" == "$TSCONFIG_CARD_ID" ]; then
            adp_number=$i
            echo $adp_number
            return
        fi
    done
}
#==============================================================================
# Get list of Service Tags from enclosures connected to adapter and their
# device id.  Returns string "device,servicetag"
#==============================================================================
function get_service_tags()
{
    tags=
    adp_id=$(get_adapter_id)
    if [ "$adp_id" == "" ]; then
        echo "No controller card found" >&2
        return 1
    else
        tags=( $(MegaCli64 -EncInfo -a${adp_id} $MEGALOG|awk '/Device ID/{printf $4","}/Vendor Specific/{print $4}' ) )
    fi
    echo ${tags[@]}
}
#==============================================================================
# Generates a mountpoint name based on something
#==============================================================================
function generate_mountpoint()
{
    tag=$1
    partition=$(echo $2 | sed 's/[^0-9]*//g')
    if [ $partition -eq 1 ]; then
        mnt_pt="/mnt/ion-ext-$tag"
    else
        mnt_pt="/mnt/ion-ext-$tag-$partition"
    fi
    echo $mnt_pt
}

#==============================================================================
# Return true when device contains partitions
#==============================================================================
function is_partitioned ()
{
    block_dev=$1
    string=$(parted $block_dev print|tail -2|head -1|awk '{print $1}')
    case $string in
        ''|*[!0-9]*)
            return 1
        ;;
        *)
            return 0
        ;;
    esac
}

#==============================================================================
# Print information about this tool
#==============================================================================
function print_info ()
{
    echo "=============================================================================="
    echo $(basename $0)
    echo
    echo "This script searches for block devices attached to the $TSCONFIG_CARD_ID"
    echo "controller card.  For any devices found that do not have a partition, one"
    echo "can be created."
    echo
    echo "=============================================================================="
}
#==============================================================================
# Print information about enclosures to stdout
#==============================================================================
function print_enclosure_info ()
{
    echo "=============================================================================="
    echo "Controller Card Scan"
    # Loop thru all controllers
    num_adp=$(MegaCli64 -adpCount $MEGALOG| grep "Controller Count" | cut -f2 -d: | sed -e 's/ //' -e 's/\.//')
    if [[ "$num_adp" == "" ]]; then num_adp=0; fi
    echo "Server: $HOSTNAME Adapters: $num_adp"
    for (( i=0; i<${num_adp}; i++ ));
    do
        name_adp=$(MegaCli64 -AdpAllInfo -a${i} $MEGALOG| grep "Product Name" | cut -f2 -d: | sed 's/ Adapter//g' | sed -e 's/^[ \t]*//')
        # Loop thru all enclosures
        num_enc=$(MegaCli64 -EncInfo -a${i} $MEGALOG| grep "Number of enclosures" |cut -f3 -d-)
        echo "Adapter: $name_adp Enclosures: $num_enc"
        MegaCli64 -EncInfo -a${i} $MEGALOG|egrep '(Vendor|Product|Device ID)'||true

    done
    echo "=============================================================================="
}

#==============================================================================
# Successful Exit message
#==============================================================================
function print_success ()
{
    echo "=============================================================================="
    echo "$(basename $0) script completed."
    echo "=============================================================================="
}

function print_help()
{
    echo
    echo "Usage: TSaddstorage [options]"
    echo -e "\t--info                           Print controller card info and exit"
    echo -e "\t--stresstest <1m|4h|8h|24h|48h>  Run burn-in test on each enclosure"
    echo -e "\t                                 1m or 4h or 8h or 24 or 48 duration"
    echo -e "\t-y                                  Answer all queries in affirmative"
    echo -e "\t-h|--help                        Print this help and exit"
    echo
}

#==============================================================================
# Helper function to get user input
#==============================================================================
function proceed_query ()
{
    query="$1"
    if [[ $FORCE_YES == 1 ]]; then
        echo $query "<== force yes"
        return 0
    fi
    read -p "$query [y|n]: " answer
    case $answer in
        "y"|"Y")
            return 0
        ;;
        *)
            return 1
        ;;
    esac
}

#==============================================================================
# Return list of required packages based on distribution
#==============================================================================
function get_required_pkgs()
{
    if [ "$(lsb_release -cs)" == "trusty" ]; then
        echo "libdevmapper-event1.02.1 watershed megacli dkms lvm2 xfsprogs lsscsi"
    else
        echo "libdevmapper-event1.02.1 watershed megacli dkms lvm2 xfsprogs lsscsi megaraid-sas-dkms"
    fi
}
#==============================================================================
# Verify required packages and tools are available before proceeding
#==============================================================================
function check_prerequisites ()
{
    fail=0
    # List of required debian packages
    required=( $(get_required_pkgs) )
    for pkg in ${required[@]}; do
        if [[ "ii" != "$(dpkg -l ${pkg}|tail -1|awk '{print $1}')" ]]; then
            echo "Cannot find $pkg package." >&2
            fail=1
        else
            #echo "Found $pkg" >&2
            :
        fi
    done
    # List of required tools
    required=( MegaCli64 parted pvcreate vgdisplay vgextend vgcreate lvcreate mkfs.xfs blkid )
    for prg in ${required[@]}; do
        if ! which $prg >/dev/null 2>&1; then
            echo "Cannot find $prg tool." >&2
            fail=1
        else
            :
        fi
    done
    return $fail
}


#==============================================================================
# Install required packages, if it is missing
#==============================================================================
function install_prerequisites()
{
    # Stand-alone use case.  Deb files need to be co-located with this script.
    # Assume this script has been unpacked along with required deb packages
    required=( $(get_required_pkgs) )
    for pkgname in ${required[@]}; do
        if [[ "$(dpkg -l $pkgname|tail -1|awk '{print $1}')" == "ii" ]]; then
            #echo $pkgname is installed
            :
        else
            log "$pkgname needs to be installed"
            pkgfile=$(find ./ -name $pkgname\* -print)
            if [[ -e $pkgfile ]]; then
                log "dpkg -i $pkgfile"
                log $(dpkg -i $pkgfile)
            else
                # should not get here
                log "apt-get --assume-yes --allow-unauthenticated install $pkgname"
                log $(apt-get --assume-yes --allow-unauthenticated install $pkgname)
            fi
        fi
    done
    log "Required packages are installed"
}

#==============================================================================
# Prompts user to customize their mountpoint
#==============================================================================
function customize_mountpoint()
{
    current_mp=$(basename $1)

    echo -e "\nYou can customize the name of the archive directory\n"
    while [ 0 ]; do
        read -e -i $current_mp -p "Modify the name (or press enter to accept current): " new_mp
        regex="^[[:alnum:]][-_[:alnum:]]{0,61}$"

        if [[ $new_mp =~ $regex ]] ; then
            #echo "VALID"
            if [ -d $(dirname $1)/$new_mp ]; then
                echo -e "\n$(dirname $1)/$new_mp already exists."
                echo "Here is a list of directories that already exist:"
                find $(dirname $1) -maxdepth 1 -type d
                echo ""
            else
                break
            fi
        else
            echo -e "\n$new_mp IS NOT VALID\nOnly alphanumeric characters, hyphens and underscores are allowed"
            # Not valid
            #return 1
        fi
    done
    mnt_pt=$(dirname $1)/$new_mp    # Global variable alert
}


#==============================================================================
# Copied from ts_functions
#==============================================================================
function outbound_net_port()
{
    port=$(/sbin/route | awk '/default/{print $8}')
    if [[ ! -z $port ]]; then
        echo $port
    fi
}

#==============================================================================
# Returns a subnet string valid for use in /etc/exports
# Example: 10.25.3.0/24
#==============================================================================
function subnet_exportfs()
{
    outbound=$(outbound_net_port)
    netmask=$(ifconfig $outbound | awk '/Mask:/ {print $4}')
    netmask=( $(echo ${netmask:5} | tr . " ") )
    cidr=0
    for val in ${netmask[@]}; do
        result=""
        while [ $val -ne 0 ]; do
            result=$(( $val % 2 ))$result
            val=$(( $val / 2 ))
        done
        ones=$(grep -o "1" <<< $result | wc -l)
        cidr=$((cidr + $ones ))
    done
    
    bcast=$(ifconfig $outbound | awk '/Mask:/ {print $3}')
    bcast=$(echo ${bcast:6}|sed 's/\.255/\.0/g')
    echo ${bcast}/${cidr}
}

#==============================================================================
# MAIN
#==============================================================================
#--------------------------------------
# trap exit codes
#--------------------------------------
trap 'error ${LINENO}' ERR

# Check command line arguments
FORCE_YES=0
STRESS_TEST=0
INFO_ONLY=False
while [ $# != 0 ]; do
    case ${1,,} in
        '--info')
            INFO_ONLY=True
        ;;
        '-y')
            # Answer affirmative for all user queries
            FORCE_YES=1
        ;;
        '--stresstest')
            # Run a burn-in test
            STRESS_TEST=1
            shift
            case $1 in
                '1m'|'4h'|'8h'|'24h'|'48h')
                    TIMEOUT=$1
                ;;
                *)
                    print_help
                    exit
                ;;
            esac
        ;;
        '-h'|'--help')
            print_help
            exit 0
        ;;
        *)
        echo "Unknown option: $1.  Exiting"
        exit 1
        ;;
    esac
    shift
done

print_info
sleep 1
# Will exit if we don't have root privilege
needs_root
print_enclosure_info
if [ $INFO_ONLY == True ]; then
    exit
fi
sleep 1

if is_perc_installed; then

    install_prerequisites

    # Verify dependent tools are installed
    if ! check_prerequisites; then
        echo -e "ERROR! Cannot continue!\n" >&2
        exit 1
    fi

    service_tags=( $(get_service_tags) )

    echo "=============================================================================="
    echo "Controller Card: $TSCONFIG_CARD_ID"
    echo "Enclosure Scan"
    echo "${#service_tags[@]} external units: ${service_tags[@]}"
    echo "=============================================================================="

    for (( i=0; $i<${#service_tags[@]}; i++ )); do

        # service_tag element is comma delimited string "deviceId,serviceTag"
        # use bash builtins to split on comma
        device_id=${service_tags[$i]%,*}
        service_tag=${service_tags[$i]#*,}

        # Get block device using device_id as lookup key
        item=$(get_block_device $device_id)

        if [ -u $item ]; then
            echo "=============================================================================="
            echo Enclosure: $device_id  Block: $item   Service Tag: $service_tag
            echo "ERROR: Did not determine block device for this enclosure. Skipping."
            echo
            continue
        else
            echo "=============================================================================="
            echo Enclosure: $device_id  Block: $item   Service Tag: $service_tag
            echo
        fi

        #======================================================================
        # If there are no partitions on the device, we need to create one
        #======================================================================
        if ! is_partitioned $item; then
            #log "$item: no partitions"

            # Query
            echo
            echo "Device $item needs to be partitioned."
            echo "Any data on the drive will be overwritten."
            if ! proceed_query "Do you want to proceed with partitioning $item?"; then
                echo "Aborting configuration of $item."
                echo "=============================================================================="
                continue
            else
                # Create partition
                log "parted -s $item mklabel gpt"
                parted -s $item mklabel gpt

                log "parted -s $item mkpart primary 0% 100%"
                parted -s $item mkpart primary 0% 100%

                # Format the partition
                echo "This can take several minutes..."
                log "mkfs.xfs -f ${item}1"
                log $(mkfs.xfs -f ${item}1)
            fi
        else
            echo "Device $item already has a partition"
        fi


        log "${item} has partitions:" # DEBUG output only
        log $(blkid -s TYPE | grep "$item")        # DEBUG output only

        for dev_part in $(blkid | grep "$item" | cut -f1 -d:); do

            mnt_pt=$(generate_mountpoint $service_tag $dev_part)
            fs=$(blkid -o value -s TYPE ${dev_part})
            dev_UUID=$(blkid -o value -s UUID ${dev_part})

            if ! grep -q "$dev_UUID" /etc/fstab; then

                #Note: We want to support ability to comment-out a line with a UUID
                #to prevent that device from being added again.
                log "We need to add ($dev_UUID) to the /etc/fstab"   #DEBUG output only

                # Query
                echo
                echo "We need to configure $dev_part to automount"
                echo
                echo "We will edit /etc/fstab file, create a mountpoint, and mount $dev_UUID ($dev_part)."
                if ! proceed_query "Do you want to proceed?"; then
                    echo "Aborting configuration of $dev_part."
                    echo "Device is configured but will not be automounted"
                    echo "=============================================================================="
                    continue
                else
                    #==============================================================
                    # Prompt to customize the name of the drive
                    #==============================================================
                    if [[ $FORCE_YES == 0 ]]; then
                        customize_mountpoint $mnt_pt    # mnt_pt variable will be overwritten
                    fi

                    #==============================================================
                    # Actual Changes made to the server...
                    #==============================================================
                    # Add entry to /etc/fstab
                    log "UUID=$dev_UUID\t$mnt_pt\t$fs\tdefaults\t0\t0"
                    echo -e "UUID=$dev_UUID\t$mnt_pt\t$fs\tdefaults\t0\t0" >> /etc/fstab
                fi

                # Create mountpoint
                log "mkdir -p $mnt_pt"
                mkdir -p $mnt_pt

                # Mount
                log "mount $mnt_pt"
                mount $mnt_pt || true

                # Set permissions
                log "chmod 0777 $mnt_pt"
                chmod 0777 $mnt_pt

                #==============================================================
                # End
                #==============================================================
                echo
                echo "Device $dev_part is ready for use at $mnt_pt"
                echo "=============================================================================="

            else
                # TODO: Check fstab for a customized mountpoint.
                mnt_pt=$(grep $dev_UUID /etc/fstab|awk '{print $2}')
                log "Already added ($dev_UUID) in the /etc/fstab"   #DEBUG output only
                echo "Device $dev_part is ready for use at $mnt_pt"
                echo "=============================================================================="
            fi
            
            #==================================================================
            # Export this volume via NFS
            #==================================================================
            echo "=============================================================================="
            echo "Network File System Access"
            echo "Currently exported volumes:"
            exportfs
            echo
            if ! grep -q "$mnt_pt" /etc/exports; then
                if proceed_query "Do you want to export $(basename ${mnt_pt}) via NFS?"; then
                    #Add to /etc/exports file
                    echo -e "${mnt_pt}\t$(subnet_exportfs)(rw,async,subtree_check)" >> /etc/exports
                    exportfs -r
                else
                    echo "Not exporting"
                fi
            else
                if proceed_query "Do you want to disable exporting $(basename ${mnt_pt})?"; then
                    # Remove from /etc/exports file
                    if sed -i "/$(basename ${mnt_pt})/d" /etc/exports; then
                        echo "File /etc/exports has been modified"
                        exportfs -r
                    else
                        echo "There was an error modifying /etc/exports"
                    fi
                fi
            fi
            echo
            echo "Now exporting:"
            exportfs
            echo
            echo "=============================================================================="
            
        done


        #======================================================================
        # Attronica burn in test
        #======================================================================
        if [[ $STRESS_TEST == 1 ]]; then
            #Check CWD for stresstest file, then check system directory
            if [[ -r ./stresstest.tgz ]]; then
                STRESS_ZIP=./stresstest.tgz
            else
                STRESS_ZIP=/usr/share/ion-tsconfig/stresstest.tgz
            fi

            echo "Running the stress test on $dev_part mounted at $mnt_pt"
            log "Running the stress test on $dev_part mounted at $mnt_pt"
            # Unpack stresstest.tgz
            if [[ -r $STRESS_ZIP ]]; then
                tar zxf $STRESS_ZIP -C $mnt_pt
                (
                    cd $mnt_pt/STRESS
                    NUM_THREAD=$(grep processor /proc/cpuinfo | wc -l)
                    LOG=TSaddstorage_${service_tag}.log
                    #./stress --verbose --io $NUM_THREAD --hdd $NUM_THREAD --timeout $TIMEOUT | tee >(egrep 'info|dbug' >$LOG) | egrep 'info|writing|closing' &
                    ./stress --verbose --io $NUM_THREAD --hdd $NUM_THREAD --timeout $TIMEOUT | egrep 'info|dbug' >$LOG &
                    echo "stress test has been launched in the background (Duration: $TIMEOUT)"
                    ps aux|grep "\./stress"|grep -v grep
                )
            else
                echo "Cannot locate stresstest.tgz. no stresstest was run."
            fi
        fi

    done

    # Allow Data Management system to recognize storage attached at /mnt mountpoint
    INSTALLED_VERSION=$(get_ts_version)
    log "TS version: $INSTALLED_VERSION"
    if [[ ! $INSTALLED_VERSION = "" ]]; then
        if [[ $INSTALLED_VERSION < '3.0' ]] || [[ $INSTALLED_VERSION = '3.0' ]]; then
            log "patch_3.0"
            log $(patch_3.0)
        elif [[ $INSTALLED_VERSION = '3.2' ]]; then
            log "patch_3.2"
            log $(patch_3.2)
        elif [[ $INSTALLED_VERSION = '3.4' ]]; then
            log "patch_3.4"
            log $(patch_3.4)
        elif [[ $INSTALLED_VERSION = '3.6' ]]; then
            log "patch_3.6"
            log $(patch_3.6)
        elif [[ $INSTALLED_VERSION > '3.6' ]]; then
            #echo "Patch not required -- $INSTALLED_VERSION"
            :
        else
            echo "Unhandled version detected! -- $INSTALLED_VERSION"
        fi
    else
        echo "Cannot determine installed TS version.  Trying 3.0 patch"
        log "patch_3.0"
        log $(patch_3.0)
    fi

else
    log "external scsi card not detected"
fi

print_success
exit

# Note:
# If you manually remove the entry from /etc/fstab, this will force the re-running
# of /etc/fstab editing, mountpoint directory creation, remounting, and
# permission setting for that partition.
#
# To remove partition
# parted <block device> rm 1
