#!/bin/bash
# Copyright (C) 2011 Ion Torrent Systems, Inc. All Rights Reserved
set -e

#--------------------------------------
#--- Include function definition file
#--------------------------------------
TSCONFIG_SRC_DIR='/usr/share/ion-tsconfig'
source $TSCONFIG_SRC_DIR/ts_params||source ../ts_params||true
source $TSCONFIG_SRC_DIR/ts_functions||source ../ts_functions||true
#--------------------------------------
# Functions
#--------------------------------------
function print_help ()
{
    echo
    echo "Usage: $0 [option]..."
    echo -e "\t--eth-dev                 Specify eth device to query"
    echo -e "\t--debug, -d               Prints script commands when executing (set -x)"
    echo -e "\t--help, -h                Prints command line args"
    echo -e "\t--version, -v             Prints version"
    echo
}

#--------------------------------------
# Trap exit
#--------------------------------------
trap 'error ${LINENO}' ERR

#--------------------------------------
# Default settings
#--------------------------------------
device=$(outbound_net_port)
environment='/etc/environment'
configfile=/etc/network/interfaces

#--------------------------------------
# command line argument parsing
#--------------------------------------
#---    We convert all arguments to lower case  ---#
while [ $# != 0 ]; do
    case ${1,,} in
        '--help'|'-h')
            print_help
            exit 0
        ;;
        
        '--version'|'-v')
            basename $0
            if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
                source /opt/ion/bin/ion-tsconfig.version.env
                IonVersionGetFullVersion ion-tsconfig
            fi
            exit 0
        ;;
        
        '--debug'|'-d')
        set -x
        ;;
        
        '--eth-dev')
        shift
        device="$1"
        ;;
        
        *)
        log "Unknown option: $1"
        echo "Unknown option: $1.  Exiting"
        echo "Use TSquery --help for options."
        exit 1
        ;;
        
    esac
    shift
done


# Example string
#http_proxy=http://bpuc:password@carnivore.com:3128
#http_proxy=http://carnivore.com:312
if ! grep -q http_proxy $environment; then
    address=
    port=
    username=
    password=
else
    # strip http_proxy=
    full_str=$(grep ^http_proxy $environment|awk -F= '{print $2}')
    prefix=$(echo $full_str|awk -F: '{print $1}')
    full_str=$(echo $full_str|sed 's/.*\/\/\(.*\)/\1/')
    
    if echo $full_str|grep -q "@"; then
        # get username and password: everything before @ symbol
        auth=$(echo $full_str|sed 's/\(.*\)@.*/\1/')
        username=$(echo $auth|cut -d: -f1)
        password=$(echo $auth|cut -d: -f2)
        # get address and port: everything after @ symbol
        other=$(echo $full_str|sed 's/.*@\(.*\)/\1/')
        address=$(echo $other|cut -d: -f1)
        port=$(echo $other|cut -d: -f2)
    else
        # get address and port:
        address=$(echo $full_str|cut -d: -f1)
        port=$(echo $full_str|cut -d: -f2)
    fi
    address=${prefix}://${address}
fi
echo "proxy_address:$address"
echo "proxy_port:$port"
echo "proxy_username:$username"
echo "proxy_password:$password"
if ! grep -q no_proxy $environment; then
    no_proxy=
else
    no_proxy=$(awk -F= '/no_proxy/ {print $2}' "$environment")
fi
echo "no_proxy:$no_proxy"

echo -e "network_device:$device"
if grep "^iface $device" $configfile | grep -q static; then
    echo "network_mode:static"
elif grep "^iface $device" $configfile | grep -q dhcp; then
    echo "network_mode:dhcp"
    echo "network_address:$(getnetworkIP $device)"
    echo "network_subnet:$(getsubnetmask $device)"
    echo "network_gateway:$(getgateway)"
else
    echo "network_mode:not found"
fi

#TODO: Discover whether its dhcp or static
if grep "^iface $device" $configfile | grep -q static; then
    sed -n "/iface $device inet static/,/^iface/ s/address .*/&/p" $configfile|awk '{print "network_address:"$2}'
    sed -n "/iface $device inet static/,/^iface/ s/netmask .*/&/p" $configfile|awk '{print "network_subnet:"$2}'
    sed -n "/iface $device inet static/,/^iface/ s/broadcast .*/&/p" $configfile|awk '{print "network_broadcast:"$2}'
    sed -n "/iface $device inet static/,/^iface/ s/gateway .*/&/p" $configfile|awk '{print "network_gateway:"$2}'
fi

# /run/resolvconf/interface directory contains files with nameserver and dns info
# Filename format is <network device>.[inet|dhclient] depending on mode static or dhcp
# T7500 servers will have eth0 network device
# T620/T630/T430 will have em1 network device
# (Possibly, T620 will have p*p1 network device)
# TODO: this is fragile and hardcoded interface names.
if [ -d "/run/resolvconf/interface" ]; then
    srcfile=$(find /run/resolvconf/interface -name "em1.*" -o -name "eth0.*" -o -name "p*p1.*" -o -name "eno1.*")
    if [[ ${#srcfile} -gt 0 ]]; then
        nameservers=""
        for entry in $(grep nameserver "$srcfile"|awk '{print $2}'); do
            if [[ ${#nameservers} -ne 0 ]]; then
                nameservers="$nameservers,$entry"
            else
                nameservers="$entry"
            fi
        done
        nameservers=${nameservers// /,}
        echo "network_nameservers:$nameservers"

        entry="$(egrep '(^search|^domain)' "$srcfile"|sed 's/search //'|sed 's/domain //')"
        entry=${entry// /,}
        echo "network_dnssearch:$entry"
    fi
elif [ -d "/run/systemd/resolved.conf.d" ]; then
    # Ubuntu 18.04 servers use systemd-resolve
    # e.g. /run/systemd/resolved.conf.d/isc-dhcp-v4-eno1.conf
    # alternatively could run "systemd-resolve --status"
    srcfile=$(find /run/systemd/resolved.conf.d -name "*-em1.*" -o -name "*-eth0.*" -o -name "p*p1.*" -o -name "*-eno1.*")
    if [[ ${#srcfile} -gt 0 ]]; then
        nameservers=$(grep DNS "$srcfile"|cut -d= -f2|sed 's/^\s//;s/ /,/g')
        echo "network_nameservers:$nameservers"
        domains=$(grep Domains "$srcfile"|cut -d= -f2|sed 's/^\s//;s/ /,/g')
        echo "network_dnssearch:$domains"
    fi
else
    # no source file found, nothing to report
    echo "network_nameservers:"
    echo "network_dnssearch:"
fi

exit 0
