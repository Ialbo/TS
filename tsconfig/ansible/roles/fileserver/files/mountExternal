#!/bin/sh

set -x
RAIDDEVICE=/dev/vdb
Force="no"
POSTGRESQL_VERSION="10"

usage()
{
	echo "usage: ./mountExternal -t OpType -f -s filesystem -o outputfile -d disk -a blinkState"
	echo " "
	echo "  OpType = Operation Type.  One of the following:"
	echo " "
	echo "          build_results"
	echo "          restart_TS"
	echo "		build_results_restart_TS"
	echo " "
	echo "  -f = force the operation to occur"
	echo " "
}

build_results()
{
	REDO=0
	MOUNTED=""

	#only re-make the filesystem if we haven't made it before, or the override is given
	if [ "$Force" = "yes" ]; then
		REDO=1
	else 
		if [ ! -e /mnt/.ionMadeExternal ]; then
			REDO=2
		fi
	fi
	MOUNTED=`mount | grep external`

	if [ "$MOUNTED" = "" ] || [ "$REDO" = "1" ]; then
		mount $RAIDDEVICE /mnt/external
		MOUNTED=`mount | grep external`
		if [ "$MOUNTED" = "" ]; then
			if [ "$REDO" != "0" ]; then
				REDO=1
			fi
		fi
		
		if [ "$REDO" = "1" ]; then
			# need to rebuild the filesystem
			pkill postgres
			sleep 5

			umount /mnt/external
			mkfs.ext4 $RAIDDEVICE
			mount $RAIDDEVICE /mnt/external
			MOUNTED=`mount | grep external`
			if [ "$MOUNTED" != "" ]; then
				rm -f /mnt/.ionFirst
			fi
		fi 
	fi

	MOUNTED=`mount | grep external`
	if [ "$MOUNTED" != "" ]; then

		mkdir /mnt/external/results
		if [ ! -h /results ]; then
			mv /results /results_saved
            ln -s /mnt/external/results /
		fi
		if [ ! -h /home/ionguest/results ]; then
			mv /home/ionguest/results /home/ionguest/results_saved
			ln -s /mnt/external/results /home/ionguest/results
		fi

		# some legacy systems did not allow non-root users to write to results
		chmod 777 /mnt/external/*
		
		# in case the data base was created from an older version of the OS, and the IDs of the users
		# have changed: update the ownership of the postgres database.
		# This MUST BE DONE BEFORE postgresql starts!
		if [ "`ls -l /mnt/external/results | grep postgres | sed -e 's/ \+/ /g' | cut -d ' ' -f 3`" != "postgres" ]; then
			chown postgres:postgres `find /results/postgresql -print`
		fi

		echo '1' > /mnt/.ionMadeExternal
		# dont ever rebuild the fs automatically again. 
	fi	
}

restart_TS()
{
	if [ "$Force" = "yes" ]; then
		rm -rf /mnt/.ionFirst
	fi
	if [ ! -e /mnt/.ionFirst ] && [ -e /mnt/.ionMadeExternal ]; then
		if [ ! -e /results/postgresql/${POSTGRESQL_VERSION} ] || [ "$Force" = "yes" ]; then
			#
			# results will be rebuilt.  Restart TS components
			#
			tar -C /results -jxf /root/pkgs/db.tar.bz2
			chmod 755 /results/postgresql
			mkdir -p /results/plugins/scratch
			sudo chmod 755 /results/plugins/
			service postgresql stop
			sudo -u postgres /usr/lib/postgresql/${POSTGRESQL_VERSION}/bin/pg_resetwal -f /results/postgresql/${POSTGRESQL_VERSION}/main/
			service postgresql start

			#	`sudo -u postgres psql 1>&2 << EOFdb
			#	CREATE USER ion WITH PASSWORD 'ion';
			#	CREATE DATABASE iondb;
			#	GRANT ALL PRIVILEGES ON DATABASE iondb to ion;
			#	\q
			#	EOFdb
			#	`
		fi

		# check for existing 14.04 database backup from "pre_migration.sh"
		/usr/sbin/post_migration.sh
	
		#
		# any Torrent Server package that has stuff installed on the /results drive, needs to be reinstalled
		#
		dpkg -i /root/pkgs/*.deb
		sudo chmod 755 /results/plugins/

		#
		# some of the above packages request some dependent packages that need to be restarted
		sudo service celeryd restart
		sudo service apache2 restart

		if [ ! -e /results/referenceLibrary/tmap-f3/hg19 ]; then
			cd /results/referenceLibrary/tmap-f3; tar -zxf /root/pkgs/hg19.tar.gz
		fi
	
		# fix any incompatabilities in the database, in case you are 
		# upgrading from an old database
		dpkg-reconfigure ion-dbreports

		date > /mnt/.ionFirst
	fi
}

#
#       the main routine
#
echo "*** mountExternal starting: $(date)"

OpType=""

while [ $# -gt 0 ] ; do
case $1 in
		-t) shift 1; OpType=$1; shift 1;;
		-f) Force="yes"; shift 1;;
		*) echo "Illegal option: " $1; usage; exit;
esac
done

OpType=`echo $OpType | sed -e "s/ //g"`

if [ "build_results" = $OpType ]; then
		build_results

elif [ "restart_TS" = $OpType ]; then
		restart_TS

elif [ "build_results_restart_TS" = $OpType ]; then
		build_results
		restart_TS

else
		echo "UNKNOWN OPERATION: " $OpType
		usage
fi

echo "*** mountExternal completed: $(date)"
